@page "/admin"
@using Microsoft.AspNetCore.OutputCaching
@using OpenAttendanceManagement.AuthCommon
@using OpenAttendanceManagement.Domain.Aggregates.OamTenants.Commands
@using OpenAttendanceManagement.Domain.Aggregates.OamTenants.ValueObjects
@using OpenAttendanceManagement.Domain.Aggregates.OamTenantUsers.Queries
@using OpenAttendanceManagement.Domain.Aggregates.OamTenantUsers.ValueObjects
@using OpenAttendanceManagement.Web.Keycloak.Apis
@using ResultBoxes
@using Sekiban.Core.Query.QueryModel
@attribute [StreamRendering]
@attribute [OutputCache(Duration = 5)]

@inject WeatherApiClient WeatherApi
@inject TenantApiClient TenantApi
@inject TokenServiceKeycloak TokenService
@inject NavigationManager NavigationManager
@inject TenantInformation TenantInformation
@inject UserApiClient UserApi
@inject IJSRuntime JsRuntime
@rendermode @(new InteractiveServerRenderMode(false))

<PageTitle>Admin</PageTitle>

<h1>Admin</h1>

<p>This component demonstrates showing data loaded from a backend API service.</p>

@if (!users.IsSuccess)
{
    <p>
        <em>Loading...</em>
        <span>@users.GetException().Message</span>
    </p>
} else
{
    <table class="table">
        <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Display Name</th>
            <th>Email</th>
            <th>User Already Created</th>
            <th>
                <button class="btn btn-info" @onclick="() => OpenCreateUserModal()">Add User</button>
            </th>
        </tr>
        </thead>
        <tbody>
        @foreach (var user in users.GetValue().Items)
        {
            <tr>
                <td>@user.UserName.FirstName</td>
                <td>@user.UserName.LastName</td>
                <td>@user.DisplayName.Value</td>
                <td>@user.Email.Value</td>
                <td>@user.IsUserCreated</td>
                <td></td>
            </tr>
        }
        </tbody>
    </table>
}
<div class="modal fade" id="createUserModal" tabindex="-1" role="dialog" aria-labelledby="createUserNameLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createUserNameLabel">Add Tenant User</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@createUserModel" OnValidSubmit="HandleCreateModelSubmit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="form-group">
                        <label for="UserEmail">User Email</label>
                        <InputText id="UserEmail" class="form-control" @bind-Value="createUserModel.UserEmail"/>
                    </div>
                    <div class="form-group">
                        <label for="FirstName">First Name</label>
                        <InputText id="FirstName" class="form-control" @bind-Value="createUserModel.FirstName"/>
                    </div>
                    <div class="form-group">
                        <label for="LastName">Last Name</label>
                        <InputText id="LastName" class="form-control" @bind-Value="createUserModel.LastName"/>
                    </div>
                    <div class="form-group">
                        <label for="DisplayName">Display Name</label>
                        <InputText id="DisplayName" class="form-control" @bind-Value="createUserModel.DisplayName"/>
                    </div>
                    @if (!string.IsNullOrEmpty(createUserModel.AddError))
                    {
                        <p>@createUserModel.AddError</p>
                    }
                    <button type="submit" class="btn btn-primary">Add Tenant User</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<script>
    function DisplayCreateUserModal (param) {
        $('#createUserModal').modal(param);
    }
</script>


@code {
    private ResultBox<ListQueryResult<OamTenantUsersQuery.Record>> users = ListQueryResult<OamTenantUsersQuery.Record>.Empty;

    protected override async Task OnInitializedAsync()
    {
        users = await UserApi.GetTenantUsers();
    }


    protected override Task OnParametersSetAsync() => TokenService
        .CheckToken()
        .Scan(_ => { }, _ => NavigationManager.NavigateTo("/login"));

    #region add tenant user
    private class TenantUserCreateModel
    {
        public string UserEmail { get; set; } = string.Empty;
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
        public string? AddError { get; set; }
    }

    private TenantUserCreateModel createUserModel = new();

    private void OpenCreateUserModal()
    {
        createUserModel = new TenantUserCreateModel();
        JsRuntime.InvokeVoidAsync("DisplayCreateUserModal", "show");
    }

    private async Task HandleCreateModelSubmit()
    {
        await Task.CompletedTask;
        Console.WriteLine(createUserModel.UserEmail);
        var result = await TenantApi.AddUserToTenant(new OamTenantCreateUser(new OamTenantId(TenantInformation.Tenant.GetValue().TenantId), AuthIdentityEmail.FromString(createUserModel.UserEmail), new TenantCode(TenantInformation.Tenant.GetValue().TenantCode), new OamTenantUserId(Guid.NewGuid()), new OamUserName(createUserModel.FirstName, createUserModel.LastName), OamDisplayName.FromString(createUserModel.DisplayName)));
        if (result.IsSuccess)
        {
            users = await UserApi.GetTenantUsers();
            // tenants = await Api.GetTenants();
            // addModel.TenantCode = string.Empty;
            // addModel.TenantName = string.Empty;
            await JsRuntime.InvokeVoidAsync("DisplayCreateUserModal", "hide");
        } else
        {
            createUserModel.AddError = "登録に失敗しました。コードの重複などにご注意ください。";
        }
    }
    #endregion

}