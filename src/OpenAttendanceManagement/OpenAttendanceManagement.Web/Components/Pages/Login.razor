@page "/login"
@inject LoginClient LoginClient
@inject TokenService TokenService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

@rendermode @(new InteractiveServerRenderMode(false))

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Login</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@loginForm" OnValidSubmit="HandleLogin" FormName="Login">
                        <DataAnnotationsValidator/>
                        <ValidationSummary class="text-danger"/>

                        <div class="form-group">
                            <label for="email">Email:</label>
                            <InputText id="email" class="form-control" @bind-Value="loginForm.Email"/>
                        </div>
                        <div class="form-group">
                            <label for="password">Password:</label>
                            <InputText id="password" class="form-control" @bind-Value="loginForm.Password" type="password"/>
                        </div>
                        <div class="form-group form-check">
                            <InputCheckbox id="rememberMe" class="form-check-input" @bind-Value="loginForm.RememberMe"/>
                            <label class="form-check-label" for="rememberMe">Remember me</label>
                        </div>
                        <button type="submit" class="btn btn-primary w-100">Login</button>
                    </EditForm>
                    <button class="btn btn-secondary w-100 mt-3" @onclick="OpenCreateUserModal">Create User</button>
                    @if (loggedIn)
                    {
                        <div class="alert alert-success mt-3">
                            Login successful!
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">
                            @errorMessage
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    function DisplayCreateUserModal(param) {
        $('#createUserModal').modal(param);
    }
</script>
<div class="modal fade" id="createUserModal" tabindex="-1" role="dialog" aria-labelledby="createUserModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createUserModalLabel">Create User</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@createUserModel" OnValidSubmit="HandleCreateUserSubmit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="form-group">
                        <label for="Email">User Email</label>
                        <InputText id="Email" class="form-control" @bind-Value="createUserModel.Email"/>
                    </div>
                    <div class="form-group">
                        <label for="Password">Password</label>
                        <InputText id="Password" class="form-control" @bind-Value="createUserModel.Password" type="password"/>
                    </div>
                    <div class="form-group">
                        <label for="PasswordReentered">Re-enter Password</label>
                        <InputText id="PasswordReentered" class="form-control" @bind-Value="createUserModel.PasswordReentered" type="password"/>
                    </div>
                    @if (!string.IsNullOrEmpty(createUserModel.AddError))
                    {
                        <p>@createUserModel.AddError</p>
                    }
                    <button type="submit" class="btn btn-primary">Create User</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>
@if (loggedIn)
{
    <p>Login successful! Token: @TokenService.SavedToken.Value</p>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <p>@errorMessage</p>
}

@code {
    private readonly LoginForm loginForm = new();
    private bool loggedIn => TokenService.HasToken;
    private string? errorMessage;

    public class LoginForm
    {
        public string? Email { get; set; } = string.Empty;
        public string? Password { get; set; } = string.Empty;
        public bool RememberMe { get; set; }
    }

    private async Task HandleLogin()
    {
        errorMessage = await LoginClient.LoginAsync(
                new LoginClient.LoginRequest
                    { Email = loginForm.Email, Password = loginForm.Password, UseCookies = false },
                CancellationToken.None)
            .Match(success => string.Empty, error => error.Message);
        await TokenService.GetTokenAsync();

        // if login was successful, redirect to /
        if (TokenService.SavedToken.HasValue)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    protected override Task OnParametersSetAsync()
        => TokenService.GetTokenAsync()
            .Scan(
                _ => { NavigationManager.NavigateTo("/"); },
                _ => { });

    private void OpenCreateUserModal()
    {
        JsRuntime.InvokeVoidAsync("DisplayCreateUserModal", "show");
    }

    private readonly TenantUserCreateModel createUserModel = new();

    private class TenantUserCreateModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string PasswordReentered { get; set; } = string.Empty;
        public string? AddError { get; }
    }

    private async Task HandleCreateUserSubmit()
    {
        await Task.CompletedTask;
        Console.WriteLine(createUserModel.Email);
        // Add logic to handle user creation
        // If successful, hide the modal
        await JsRuntime.InvokeVoidAsync("DisplayCreateUserModal", "hide");
    }

}