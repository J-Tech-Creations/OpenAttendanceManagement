@page "/"
@using OpenAttendanceManagement.Domain.Aggregates.OamTenants.Commands
@using OpenAttendanceManagement.Domain.Aggregates.OamTenants.Queries
@using OpenAttendanceManagement.Domain.Aggregates.OamTenants.ValueObjects
@using OpenAttendanceManagement.Domain.Aggregates.Queries
@using OpenAttendanceManagement.Web.Apis
@inject TokenService TokenService
@inject NavigationManager NavigationManager
@inject TenantApiClient TenantApiClient;
@inject UserApiClient UserApiClient;
@inject TenantInformation TenantInformation;
@rendermode @(new InteractiveServerRenderMode(false))

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<table class="table">
    <thead>
    <tr>
        <th>Tenant Code</th>
        <th>Tenant Name</th>
        <th>IsActive</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var tenant in TenantInformation.Tenants)
    {
        <tr>
            <td>@tenant.TenantCode</td>
            <td>@tenant.TenantName</td>
            <td>
                @if (tenant.TenantId == TenantInformation.Tenant.Value?.TenantId)
                {
                    <span>Current</span>
                }
                else
                {
                    <button class="btn btn-info" @onclick="() => ChangeTenant(tenant)">Change to Current</button>
                }
            </td>
        </tr>
    }
    @switch (MyUserInformation)
    {
        case { IsSuccess : false } failure:
            <p>@failure.GetException().Message</p>
            break;
        case { IsSuccess: true } success:
        {
            var user = success.GetValue();
            switch (user.CurrentUserState, user.ExistingUser.HasValue)
            {
                case (nameof(OamUnconfirmedTenantUserInformation), true):
                    <button class="btn btn-info" @onclick="() => AcceptInvitation()">Join Tenant @TenantInformation.Tenant.GetValue().TenantCode</button>
                    break;
                case (nameof(OamConfirmedTenantUserInformation), true):
                    <span>Welcome to tenant @TenantInformation.Tenant.GetValue().TenantCode !!!</span>
                    break;
                default:
                    <p>
                        No Invitation for the @TenantInformation.Tenant.Match(v => v.TenantCode, () => "[no tenant]") yet. Please ask administarator to add your email address.
                        @(Email.Match(v => v, _ => "[no email]"))
                    </p>
                    break;
            }

            break;
        }
    }
    </tbody>
</table>


@code {
    ResultBox<MyUserInformationQuery.Result> MyUserInformation { get; set; } = ResultBox<MyUserInformationQuery.Result>.FromException(new ApplicationException("Not loaded yet"));
    ResultBox<string> Email { get; set; } = ResultBox<string>.FromException(new ApplicationException("Not loaded yet"));

    protected override async Task OnParametersSetAsync()
    {
        var r = await
            ResultBox.Start
                .Log("Home OnParametersSetAsync start")
                .Conveyor(TokenService.GetTokenAsync)
                .Scan(_ => { }, _ => NavigationManager.NavigateTo("/login"))
                .Conveyor(() => TenantApiClient.GetMyTenants())
                .Conveyor(async () =>
                {
                    if (TenantInformation.Tenant.HasValue)
                    {
                        var r = await UserApiClient.GetMyTenantUser();
                        r.Log("GetMyTenantUser finished - ");
                        return r;
                    }

                    return ResultBox<MyUserInformationQuery.Result>.FromException(new ApplicationException("You don't have tenant invitation yet."));
                });
        Console.WriteLine("MyUserInformation before set");
        MyUserInformation = r;
        Console.WriteLine("MyUserInformation after set");
        Email = await TokenService.GetEmailAsync();
        StateHasChanged();
        Console.WriteLine("StateHasChanged called");
    }
    // await
    //     ResultBox.Start
    //         .Log("Home OnParametersSetAsync start")
    //         .Conveyor(TokenService.GetTokenAsync)
    //         .Scan(_ => { }, _ => NavigationManager.NavigateTo("/login"))
    //         .Conveyor(() => TenantApiClient.GetMyTenants())
    //         .DoWrapTry(async () =>
    //         {
    //             if (TenantInformation.Tenant.HasValue)
    //             {
    //                 var r = await UserApiClient.GetMyTenantUser();
    //                 r.Log("GetMyTenantUser finished - ");
    //                 await InvokeAsync(() => { MyUserInformation = r; });
    //                 Console.WriteLine("MyUserInformation set");
    //             }
    //             else
    //             {
    //                 MyUserInformation = ResultBox<MyUserInformationQuery.Result>.FromException(new ApplicationException("You don't have tenant invitation yet."));
    //             }
    //         })
    //         .Log("Home OnParametersSetAsync 3")
    //         .DoWrapTry(
    //             async () => { await InvokeAsync(() => StateHasChanged()); })
    //         .DoResult(_ => Console.WriteLine("all finished"))
    //         .Log("Home OnParametersSetAsync end");

    private async Task ChangeTenant(BelongingTenantQuery.Record toChange)
    {
        TenantInformation.ChangeTenant(toChange.TenantId);
        if (TenantInformation.Tenant.HasValue)
        {
            MyUserInformation = await UserApiClient.GetMyTenantUser();
            StateHasChanged();
        }
    }

    private async Task AcceptInvitation()
    {
        if (TenantInformation.Tenant.HasValue)
        {
            var tenant = TenantInformation.Tenant.GetValue();
            var result = await TenantApiClient.AddUserAcceptInviteOnTenant(new OamTenantUserAcceptInvite(new TenantCode(tenant.TenantCode), new OamTenantId(tenant.TenantId)));
            if (result.IsSuccess)
            {
                MyUserInformation = await UserApiClient.GetMyTenantUser();
                StateHasChanged();
            }
        }
    }

}