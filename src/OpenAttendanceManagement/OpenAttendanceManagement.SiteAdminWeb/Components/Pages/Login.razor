@page "/login"
@inject LoginClient LoginClient
@inject TokenService TokenService
@inject NavigationManager NavigationManager

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Login</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@loginForm" OnValidSubmit="HandleLogin" FormName="Login">
                        <DataAnnotationsValidator/>
                        <ValidationSummary class="text-danger"/>

                        <div class="form-group">
                            <label for="email">Email:</label>
                            <InputText id="email" class="form-control" @bind-Value="loginForm.Email"/>
                        </div>
                        <div class="form-group">
                            <label for="password">Password:</label>
                            <InputText id="password" class="form-control" @bind-Value="loginForm.Password" type="password"/>
                        </div>
                        <div class="form-group form-check">
                            <InputCheckbox id="rememberMe" class="form-check-input" @bind-Value="loginForm.RememberMe"/>
                            <label class="form-check-label" for="rememberMe">Remember me</label>
                        </div>
                        <button type="submit" class="btn btn-primary w-100">Login</button>
                    </EditForm>

                    @if (loggedIn)
                    {
                        <div class="alert alert-success mt-3">
                            Login successful!
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">
                            @errorMessage
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private readonly LoginForm loginForm = new();
    private bool loggedIn;
    private string? errorMessage;

    public class LoginForm
    {
        public string? Email { get; set; } = string.Empty;
        public string? Password { get; set; } = string.Empty;
        public bool RememberMe { get; set; }
    }

    private async Task HandleLogin()
    {
        errorMessage = await LoginClient.LoginAsync(
                new LoginClient.LoginRequest
                    { Email = loginForm.Email, Password = loginForm.Password, UseCookies = false },
                CancellationToken.None)
            .Match(success => string.Empty, error => error.Message);
        await TokenService.UpdateRoleAsync();
        if (!TokenService.IsSiteAdmin)
        {
            errorMessage = "管理者アカウントでないとログインできません。";
        }

        // if login was successful, redirect to /
        await TokenService.UpdateRoleAsync()
            .ScanResult(result =>
            {
                if (result.IsSuccess && TokenService.IsSiteAdmin)
                {
                    loggedIn = true;
                    NavigationManager.NavigateTo("/");
                }
            });
    }

    protected override Task OnParametersSetAsync()
        => TokenService.UpdateRoleAsync()
            .ScanResult(
                result =>
                {
                    if (result.IsSuccess || TokenService.IsSiteAdmin)
                    {
                        NavigationManager.NavigateTo("/login");
                    }
                });

}